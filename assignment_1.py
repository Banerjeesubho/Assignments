# -*- coding: utf-8 -*-
"""Assignment_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d8gbkwNToPOoeoFYCVSStm0mKKb6FytM

#Answers

##1.  
###In the given elements "hello", "-87.8" and "6" are values and "*", "+", "-" and "/" are expressions.

##2. 
###Variable is a memory location where we can store different types of data and string is a datatype in python which is a sequence of characters enclosed in quotes.

###For example: h="hello", here 'h' is a variable and 'hello' is a string which enclosed in quotes.

###This is the basic difference between variable and string.

##3. 
###There are many data types in python such as integers, floats, strings, booleans etc.

##a) Integers: 
###This value is represented by int class. It contains positive or negative whole numbers (without fraction or decimal). example: 34, -34 etc.
"""

a=34
b=-34
print(type(a))
print(type(b))

"""##b) Booleans: 
###          There are two built-in values, True or False. Boolean objects that are equal to True are true, and those equal to False are false. But non-Boolean objects can be evaluated in Boolean context as well and determined to be true or false. It is denoted by the class bool.
"""

one = True
two = False

print(type(one))
print(type(two))

"""## String: 
###A string is a collection of one or more characters enclosed in a single quote, double-quote or triple quote. It is represented by the class str.
"""

c="hello sir"
print(type(c))

"""##4.
###An expression made up of operators.

###The expression in Python produces some value or result after being interpreted by the Python interpreter.

##5.

### A statement in Python is used for creating variables or for displaying values, where an expression in Python produces some value or result after being interpreted by the Python interpreter.
"""

spam=10 # it is a statement
print(spam) # statement

spam=10 # statement
spam+=1 # expression
print(spam)

"""### A statement is not evaluated for some results. A statement is used for creating variables or for displaying values where an expression in Python is evaluated for some results.

##6.
###Here the value of 'bacon' is 22. Though we do not assign any other variable for 'bacon+1', so that the value of 'bacon' remains constant.
"""

bacon=22
bacon+1
print(bacon)

"""##7. 
### String has concatenation property and here 'spam' and 'spamspam' are string, so that they will be concatenate if I run 'spam'+'spamspam'.
"""

'spam'+'spamspam'

"""###If I run 'spam' * 3, then 'spam' will be print for three times."""

'spam'* 3

"""##8.
### Variable names cannot begin with a number. A variable name must start with a letter or the underscore character. So that 'eggs' is a valid variable name while 100 is invalid, but _100 is a valid variable. 
"""

eggs="one" # here eggs is a valid variable 
print(eggs)

100="two" # here 100 is an invalid variable

_100="three" # here _100 is an invalid variable
print(_100)

"""##9.
###The int() , float() , and str( ) functions used to get the integer, floating-point number, or string version of a value.

##10.
###The expression 'I have eaten' + 99 + 'burritos' throws an error because only string element can concatenate. Here 99 is an integer.
"""

try:
  'I have eaten'+ 99 +'burritos'
except:
  print("concatenation can not possible")